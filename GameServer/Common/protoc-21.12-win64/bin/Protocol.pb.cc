// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR S_Enter::S_Enter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EnterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EnterDefaultTypeInternal() {}
  union {
    S_Enter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EnterDefaultTypeInternal _S_Enter_default_instance_;
PROTOBUF_CONSTEXPR S_Leave::S_Leave(
    ::_pbi::ConstantInitialized) {}
struct S_LeaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LeaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LeaveDefaultTypeInternal() {}
  union {
    S_Leave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LeaveDefaultTypeInternal _S_Leave_default_instance_;
PROTOBUF_CONSTEXPR C_Move::C_Move(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posinfo_)*/nullptr
  , /*decltype(_impl_.animinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MoveDefaultTypeInternal() {}
  union {
    C_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MoveDefaultTypeInternal _C_Move_default_instance_;
PROTOBUF_CONSTEXPR S_Move::S_Move(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posinfo_)*/nullptr
  , /*decltype(_impl_.animinfo_)*/nullptr
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MoveDefaultTypeInternal() {}
  union {
    S_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MoveDefaultTypeInternal _S_Move_default_instance_;
PROTOBUF_CONSTEXPR S_Spawn::S_Spawn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SpawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SpawnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SpawnDefaultTypeInternal() {}
  union {
    S_Spawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SpawnDefaultTypeInternal _S_Spawn_default_instance_;
PROTOBUF_CONSTEXPR S_Despawn::S_Despawn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectids_)*/{}
  , /*decltype(_impl_._objectids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DespawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DespawnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DespawnDefaultTypeInternal() {}
  union {
    S_Despawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DespawnDefaultTypeInternal _S_Despawn_default_instance_;
PROTOBUF_CONSTEXPR C_Die::C_Die(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_DieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DieDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DieDefaultTypeInternal() {}
  union {
    C_Die _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DieDefaultTypeInternal _C_Die_default_instance_;
PROTOBUF_CONSTEXPR S_Trapexecute::S_Trapexecute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trapno_)*/{}
  , /*decltype(_impl_._trapno_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_TrapexecuteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_TrapexecuteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_TrapexecuteDefaultTypeInternal() {}
  union {
    S_Trapexecute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_TrapexecuteDefaultTypeInternal _S_Trapexecute_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.posinfo_)*/nullptr
  , /*decltype(_impl_.statinfo_)*/nullptr
  , /*decltype(_impl_.objectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR PositionInfo::PositionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currentposx_)*/0
  , /*decltype(_impl_.currentposy_)*/0
  , /*decltype(_impl_.currentposz_)*/0
  , /*decltype(_impl_.destinationposx_)*/0
  , /*decltype(_impl_.destinationposy_)*/0
  , /*decltype(_impl_.destinationposz_)*/0
  , /*decltype(_impl_.rotatey_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionInfoDefaultTypeInternal() {}
  union {
    PositionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
PROTOBUF_CONSTEXPR StatInfo::StatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.life_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatInfoDefaultTypeInternal() {}
  union {
    StatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatInfoDefaultTypeInternal _StatInfo_default_instance_;
PROTOBUF_CONSTEXPR AnimInfo::AnimInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnimInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimInfoDefaultTypeInternal() {}
  union {
    AnimInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimInfoDefaultTypeInternal _AnimInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _impl_.objectinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Leave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Move, _impl_.posinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Move, _impl_.animinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _impl_.posinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _impl_.animinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Spawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Spawn, _impl_.objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Despawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Despawn, _impl_.objectids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Die, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Die, _impl_.objectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Trapexecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Trapexecute, _impl_.trapno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.posinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.statinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.currentposx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.currentposy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.currentposz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.destinationposx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.destinationposy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.destinationposz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PositionInfo, _impl_.rotatey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.life_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::AnimInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::AnimInfo, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::S_Enter)},
  { 7, -1, -1, sizeof(::Protocol::S_Leave)},
  { 13, -1, -1, sizeof(::Protocol::C_Move)},
  { 21, -1, -1, sizeof(::Protocol::S_Move)},
  { 30, -1, -1, sizeof(::Protocol::S_Spawn)},
  { 37, -1, -1, sizeof(::Protocol::S_Despawn)},
  { 44, -1, -1, sizeof(::Protocol::C_Die)},
  { 51, -1, -1, sizeof(::Protocol::S_Trapexecute)},
  { 58, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 68, -1, -1, sizeof(::Protocol::PositionInfo)},
  { 81, -1, -1, sizeof(::Protocol::StatInfo)},
  { 90, -1, -1, sizeof(::Protocol::AnimInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_S_Enter_default_instance_._instance,
  &::Protocol::_S_Leave_default_instance_._instance,
  &::Protocol::_C_Move_default_instance_._instance,
  &::Protocol::_S_Move_default_instance_._instance,
  &::Protocol::_S_Spawn_default_instance_._instance,
  &::Protocol::_S_Despawn_default_instance_._instance,
  &::Protocol::_C_Die_default_instance_._instance,
  &::Protocol::_S_Trapexecute_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_PositionInfo_default_instance_._instance,
  &::Protocol::_StatInfo_default_instance_._instance,
  &::Protocol::_AnimInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\"3\n\007S_Enter\022(\n"
  "\nobjectInfo\030\001 \001(\0132\024.Protocol.ObjectInfo\""
  "\t\n\007S_Leave\"W\n\006C_Move\022\'\n\007posInfo\030\001 \001(\0132\026."
  "Protocol.PositionInfo\022$\n\010animInfo\030\002 \001(\0132"
  "\022.Protocol.AnimInfo\"i\n\006S_Move\022\020\n\010objectI"
  "d\030\001 \001(\005\022\'\n\007posInfo\030\002 \001(\0132\026.Protocol.Posi"
  "tionInfo\022$\n\010animInfo\030\003 \001(\0132\022.Protocol.An"
  "imInfo\"0\n\007S_Spawn\022%\n\007objects\030\001 \003(\0132\024.Pro"
  "tocol.ObjectInfo\"\036\n\tS_Despawn\022\021\n\tobjectI"
  "ds\030\001 \003(\005\"\031\n\005C_Die\022\020\n\010objectId\030\001 \001(\005\"\037\n\rS"
  "_Trapexecute\022\016\n\006trapNo\030\001 \003(\005\"{\n\nObjectIn"
  "fo\022\020\n\010objectId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\'\n\007po"
  "sInfo\030\003 \001(\0132\026.Protocol.PositionInfo\022$\n\010s"
  "tatInfo\030\004 \001(\0132\022.Protocol.StatInfo\"\251\001\n\014Po"
  "sitionInfo\022\023\n\013currentPosX\030\001 \001(\002\022\023\n\013curre"
  "ntPosY\030\002 \001(\002\022\023\n\013currentPosZ\030\003 \001(\002\022\027\n\017des"
  "tinationPosX\030\004 \001(\002\022\027\n\017destinationPosY\030\005 "
  "\001(\002\022\027\n\017destinationPosZ\030\006 \001(\002\022\017\n\007rotateY\030"
  "\007 \001(\002\"6\n\010StatInfo\022\r\n\005level\030\001 \001(\005\022\014\n\004life"
  "\030\002 \001(\005\022\r\n\005speed\030\003 \001(\002\"\031\n\010AnimInfo\022\r\n\005sta"
  "te\030\001 \001(\005*s\n\005MsgId\022\013\n\007S_ENTER\020\000\022\013\n\007S_LEAV"
  "E\020\001\022\n\n\006C_MOVE\020\002\022\n\n\006S_MOVE\020\003\022\013\n\007S_SPAWN\020\004"
  "\022\r\n\tS_DESPAWN\020\005\022\t\n\005C_DIE\020\006\022\021\n\rS_TRAPEXEC"
  "UTE\020\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 933, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_Enter::_Internal {
 public:
  static const ::Protocol::ObjectInfo& objectinfo(const S_Enter* msg);
};

const ::Protocol::ObjectInfo&
S_Enter::_Internal::objectinfo(const S_Enter* msg) {
  return *msg->_impl_.objectinfo_;
}
S_Enter::S_Enter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Enter)
}
S_Enter::S_Enter(const S_Enter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Enter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectinfo()) {
    _this->_impl_.objectinfo_ = new ::Protocol::ObjectInfo(*from._impl_.objectinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Enter)
}

inline void S_Enter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Enter::~S_Enter() {
  // @@protoc_insertion_point(destructor:Protocol.S_Enter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Enter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objectinfo_;
}

void S_Enter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Enter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Enter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.objectinfo_ != nullptr) {
    delete _impl_.objectinfo_;
  }
  _impl_.objectinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Enter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo objectInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Enter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Enter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo objectInfo = 1;
  if (this->_internal_has_objectinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectinfo(this),
        _Internal::objectinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Enter)
  return target;
}

size_t S_Enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Enter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo objectInfo = 1;
  if (this->_internal_has_objectinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Enter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Enter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Enter::GetClassData() const { return &_class_data_; }


void S_Enter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Enter*>(&to_msg);
  auto& from = static_cast<const S_Enter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Enter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectinfo()) {
    _this->_internal_mutable_objectinfo()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_objectinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Enter::CopyFrom(const S_Enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Enter::IsInitialized() const {
  return true;
}

void S_Enter::InternalSwap(S_Enter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.objectinfo_, other->_impl_.objectinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Enter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_Leave::_Internal {
 public:
};

S_Leave::S_Leave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Leave)
}
S_Leave::S_Leave(const S_Leave& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_Leave* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Leave)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Leave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Leave::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_Leave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_Move::_Internal {
 public:
  static const ::Protocol::PositionInfo& posinfo(const C_Move* msg);
  static const ::Protocol::AnimInfo& animinfo(const C_Move* msg);
};

const ::Protocol::PositionInfo&
C_Move::_Internal::posinfo(const C_Move* msg) {
  return *msg->_impl_.posinfo_;
}
const ::Protocol::AnimInfo&
C_Move::_Internal::animinfo(const C_Move* msg) {
  return *msg->_impl_.animinfo_;
}
C_Move::C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Move)
}
C_Move::C_Move(const C_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Move* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.animinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posinfo()) {
    _this->_impl_.posinfo_ = new ::Protocol::PositionInfo(*from._impl_.posinfo_);
  }
  if (from._internal_has_animinfo()) {
    _this->_impl_.animinfo_ = new ::Protocol::AnimInfo(*from._impl_.animinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Move)
}

inline void C_Move::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.animinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_Move::~C_Move() {
  // @@protoc_insertion_point(destructor:Protocol.C_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.posinfo_;
  if (this != internal_default_instance()) delete _impl_.animinfo_;
}

void C_Move::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.posinfo_ != nullptr) {
    delete _impl_.posinfo_;
  }
  _impl_.posinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.animinfo_ != nullptr) {
    delete _impl_.animinfo_;
  }
  _impl_.animinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PositionInfo posInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AnimInfo animInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_animinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PositionInfo posInfo = 1;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AnimInfo animInfo = 2;
  if (this->_internal_has_animinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::animinfo(this),
        _Internal::animinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Move)
  return target;
}

size_t C_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PositionInfo posInfo = 1;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posinfo_);
  }

  // .Protocol.AnimInfo animInfo = 2;
  if (this->_internal_has_animinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.animinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Move::GetClassData() const { return &_class_data_; }


void C_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Move*>(&to_msg);
  auto& from = static_cast<const C_Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Move)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_posinfo()) {
    _this->_internal_mutable_posinfo()->::Protocol::PositionInfo::MergeFrom(
        from._internal_posinfo());
  }
  if (from._internal_has_animinfo()) {
    _this->_internal_mutable_animinfo()->::Protocol::AnimInfo::MergeFrom(
        from._internal_animinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Move::CopyFrom(const C_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Move::IsInitialized() const {
  return true;
}

void C_Move::InternalSwap(C_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Move, _impl_.animinfo_)
      + sizeof(C_Move::_impl_.animinfo_)
      - PROTOBUF_FIELD_OFFSET(C_Move, _impl_.posinfo_)>(
          reinterpret_cast<char*>(&_impl_.posinfo_),
          reinterpret_cast<char*>(&other->_impl_.posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_Move::_Internal {
 public:
  static const ::Protocol::PositionInfo& posinfo(const S_Move* msg);
  static const ::Protocol::AnimInfo& animinfo(const S_Move* msg);
};

const ::Protocol::PositionInfo&
S_Move::_Internal::posinfo(const S_Move* msg) {
  return *msg->_impl_.posinfo_;
}
const ::Protocol::AnimInfo&
S_Move::_Internal::animinfo(const S_Move* msg) {
  return *msg->_impl_.animinfo_;
}
S_Move::S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Move)
}
S_Move::S_Move(const S_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Move* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.animinfo_){nullptr}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posinfo()) {
    _this->_impl_.posinfo_ = new ::Protocol::PositionInfo(*from._impl_.posinfo_);
  }
  if (from._internal_has_animinfo()) {
    _this->_impl_.animinfo_ = new ::Protocol::AnimInfo(*from._impl_.animinfo_);
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Move)
}

inline void S_Move::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.animinfo_){nullptr}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Move::~S_Move() {
  // @@protoc_insertion_point(destructor:Protocol.S_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.posinfo_;
  if (this != internal_default_instance()) delete _impl_.animinfo_;
}

void S_Move::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.posinfo_ != nullptr) {
    delete _impl_.posinfo_;
  }
  _impl_.posinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.animinfo_ != nullptr) {
    delete _impl_.animinfo_;
  }
  _impl_.animinfo_ = nullptr;
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PositionInfo posInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AnimInfo animInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_animinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.PositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AnimInfo animInfo = 3;
  if (this->_internal_has_animinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::animinfo(this),
        _Internal::animinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Move)
  return target;
}

size_t S_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posinfo_);
  }

  // .Protocol.AnimInfo animInfo = 3;
  if (this->_internal_has_animinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.animinfo_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Move::GetClassData() const { return &_class_data_; }


void S_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Move*>(&to_msg);
  auto& from = static_cast<const S_Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Move)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_posinfo()) {
    _this->_internal_mutable_posinfo()->::Protocol::PositionInfo::MergeFrom(
        from._internal_posinfo());
  }
  if (from._internal_has_animinfo()) {
    _this->_internal_mutable_animinfo()->::Protocol::AnimInfo::MergeFrom(
        from._internal_animinfo());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Move::CopyFrom(const S_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Move::IsInitialized() const {
  return true;
}

void S_Move::InternalSwap(S_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Move, _impl_.objectid_)
      + sizeof(S_Move::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(S_Move, _impl_.posinfo_)>(
          reinterpret_cast<char*>(&_impl_.posinfo_),
          reinterpret_cast<char*>(&other->_impl_.posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_Spawn::_Internal {
 public:
};

S_Spawn::S_Spawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Spawn)
}
S_Spawn::S_Spawn(const S_Spawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Spawn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){from._impl_.objects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Spawn)
}

inline void S_Spawn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Spawn::~S_Spawn() {
  // @@protoc_insertion_point(destructor:Protocol.S_Spawn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Spawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
}

void S_Spawn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Spawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Spawn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Spawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Spawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo objects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Spawn)
  return target;
}

size_t S_Spawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Spawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Spawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Spawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Spawn::GetClassData() const { return &_class_data_; }


void S_Spawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Spawn*>(&to_msg);
  auto& from = static_cast<const S_Spawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Spawn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Spawn::CopyFrom(const S_Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Spawn::IsInitialized() const {
  return true;
}

void S_Spawn::InternalSwap(S_Spawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Spawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_Despawn::_Internal {
 public:
};

S_Despawn::S_Despawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Despawn)
}
S_Despawn::S_Despawn(const S_Despawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Despawn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectids_){from._impl_.objectids_}
    , /*decltype(_impl_._objectids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Despawn)
}

inline void S_Despawn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectids_){arena}
    , /*decltype(_impl_._objectids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Despawn::~S_Despawn() {
  // @@protoc_insertion_point(destructor:Protocol.S_Despawn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Despawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectids_.~RepeatedField();
}

void S_Despawn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Despawn::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Despawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Despawn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 objectIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objectids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_objectids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Despawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Despawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 objectIds = 1;
  {
    int byte_size = _impl_._objectids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_objectids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Despawn)
  return target;
}

size_t S_Despawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Despawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 objectIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.objectids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._objectids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Despawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Despawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Despawn::GetClassData() const { return &_class_data_; }


void S_Despawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Despawn*>(&to_msg);
  auto& from = static_cast<const S_Despawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Despawn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objectids_.MergeFrom(from._impl_.objectids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Despawn::CopyFrom(const S_Despawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Despawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Despawn::IsInitialized() const {
  return true;
}

void S_Despawn::InternalSwap(S_Despawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objectids_.InternalSwap(&other->_impl_.objectids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Despawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_Die::_Internal {
 public:
};

C_Die::C_Die(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Die)
}
C_Die::C_Die(const C_Die& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Die* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Die)
}

inline void C_Die::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_Die::~C_Die() {
  // @@protoc_insertion_point(destructor:Protocol.C_Die)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Die::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Die::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Die::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Die)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Die::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Die::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Die)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Die)
  return target;
}

size_t C_Die::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Die)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Die::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Die::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Die::GetClassData() const { return &_class_data_; }


void C_Die::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Die*>(&to_msg);
  auto& from = static_cast<const C_Die&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Die)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Die::CopyFrom(const C_Die& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Die)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Die::IsInitialized() const {
  return true;
}

void C_Die::InternalSwap(C_Die* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Die::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_Trapexecute::_Internal {
 public:
};

S_Trapexecute::S_Trapexecute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Trapexecute)
}
S_Trapexecute::S_Trapexecute(const S_Trapexecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Trapexecute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trapno_){from._impl_.trapno_}
    , /*decltype(_impl_._trapno_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Trapexecute)
}

inline void S_Trapexecute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trapno_){arena}
    , /*decltype(_impl_._trapno_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Trapexecute::~S_Trapexecute() {
  // @@protoc_insertion_point(destructor:Protocol.S_Trapexecute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Trapexecute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trapno_.~RepeatedField();
}

void S_Trapexecute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Trapexecute::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Trapexecute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trapno_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Trapexecute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 trapNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_trapno(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_trapno(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Trapexecute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Trapexecute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 trapNo = 1;
  {
    int byte_size = _impl_._trapno_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_trapno(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Trapexecute)
  return target;
}

size_t S_Trapexecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Trapexecute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 trapNo = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.trapno_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._trapno_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Trapexecute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Trapexecute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Trapexecute::GetClassData() const { return &_class_data_; }


void S_Trapexecute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Trapexecute*>(&to_msg);
  auto& from = static_cast<const S_Trapexecute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Trapexecute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trapno_.MergeFrom(from._impl_.trapno_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Trapexecute::CopyFrom(const S_Trapexecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Trapexecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Trapexecute::IsInitialized() const {
  return true;
}

void S_Trapexecute::InternalSwap(S_Trapexecute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trapno_.InternalSwap(&other->_impl_.trapno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Trapexecute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::Protocol::PositionInfo& posinfo(const ObjectInfo* msg);
  static const ::Protocol::StatInfo& statinfo(const ObjectInfo* msg);
};

const ::Protocol::PositionInfo&
ObjectInfo::_Internal::posinfo(const ObjectInfo* msg) {
  return *msg->_impl_.posinfo_;
}
const ::Protocol::StatInfo&
ObjectInfo::_Internal::statinfo(const ObjectInfo* msg) {
  return *msg->_impl_.statinfo_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.statinfo_){nullptr}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_posinfo()) {
    _this->_impl_.posinfo_ = new ::Protocol::PositionInfo(*from._impl_.posinfo_);
  }
  if (from._internal_has_statinfo()) {
    _this->_impl_.statinfo_ = new ::Protocol::StatInfo(*from._impl_.statinfo_);
  }
  _this->_impl_.objectid_ = from._impl_.objectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.posinfo_){nullptr}
    , decltype(_impl_.statinfo_){nullptr}
    , decltype(_impl_.objectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.posinfo_;
  if (this != internal_default_instance()) delete _impl_.statinfo_;
}

void ObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.posinfo_ != nullptr) {
    delete _impl_.posinfo_;
  }
  _impl_.posinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.statinfo_ != nullptr) {
    delete _impl_.statinfo_;
  }
  _impl_.statinfo_ = nullptr;
  _impl_.objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ObjectInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PositionInfo posInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.StatInfo statInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ObjectInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .Protocol.PositionInfo posInfo = 3;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.StatInfo statInfo = 4;
  if (this->_internal_has_statinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::statinfo(this),
        _Internal::statinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Protocol.PositionInfo posInfo = 3;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posinfo_);
  }

  // .Protocol.StatInfo statInfo = 4;
  if (this->_internal_has_statinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statinfo_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }


void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectInfo*>(&to_msg);
  auto& from = static_cast<const ObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_posinfo()) {
    _this->_internal_mutable_posinfo()->::Protocol::PositionInfo::MergeFrom(
        from._internal_posinfo());
  }
  if (from._internal_has_statinfo()) {
    _this->_internal_mutable_statinfo()->::Protocol::StatInfo::MergeFrom(
        from._internal_statinfo());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.objectid_)
      + sizeof(ObjectInfo::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.posinfo_)>(
          reinterpret_cast<char*>(&_impl_.posinfo_),
          reinterpret_cast<char*>(&other->_impl_.posinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class PositionInfo::_Internal {
 public:
};

PositionInfo::PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PositionInfo)
}
PositionInfo::PositionInfo(const PositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currentposx_){}
    , decltype(_impl_.currentposy_){}
    , decltype(_impl_.currentposz_){}
    , decltype(_impl_.destinationposx_){}
    , decltype(_impl_.destinationposy_){}
    , decltype(_impl_.destinationposz_){}
    , decltype(_impl_.rotatey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.currentposx_, &from._impl_.currentposx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotatey_) -
    reinterpret_cast<char*>(&_impl_.currentposx_)) + sizeof(_impl_.rotatey_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PositionInfo)
}

inline void PositionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currentposx_){0}
    , decltype(_impl_.currentposy_){0}
    , decltype(_impl_.currentposz_){0}
    , decltype(_impl_.destinationposx_){0}
    , decltype(_impl_.destinationposy_){0}
    , decltype(_impl_.destinationposz_){0}
    , decltype(_impl_.rotatey_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionInfo::~PositionInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PositionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PositionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.currentposx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotatey_) -
      reinterpret_cast<char*>(&_impl_.currentposx_)) + sizeof(_impl_.rotatey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float currentPosX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.currentposx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float currentPosY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.currentposy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float currentPosZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.currentposz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float destinationPosX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.destinationposx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float destinationPosY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.destinationposy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float destinationPosZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.destinationposz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotateY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PositionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float currentPosX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposx = this->_internal_currentposx();
  uint32_t raw_currentposx;
  memcpy(&raw_currentposx, &tmp_currentposx, sizeof(tmp_currentposx));
  if (raw_currentposx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_currentposx(), target);
  }

  // float currentPosY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposy = this->_internal_currentposy();
  uint32_t raw_currentposy;
  memcpy(&raw_currentposy, &tmp_currentposy, sizeof(tmp_currentposy));
  if (raw_currentposy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_currentposy(), target);
  }

  // float currentPosZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposz = this->_internal_currentposz();
  uint32_t raw_currentposz;
  memcpy(&raw_currentposz, &tmp_currentposz, sizeof(tmp_currentposz));
  if (raw_currentposz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_currentposz(), target);
  }

  // float destinationPosX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposx = this->_internal_destinationposx();
  uint32_t raw_destinationposx;
  memcpy(&raw_destinationposx, &tmp_destinationposx, sizeof(tmp_destinationposx));
  if (raw_destinationposx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_destinationposx(), target);
  }

  // float destinationPosY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposy = this->_internal_destinationposy();
  uint32_t raw_destinationposy;
  memcpy(&raw_destinationposy, &tmp_destinationposy, sizeof(tmp_destinationposy));
  if (raw_destinationposy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_destinationposy(), target);
  }

  // float destinationPosZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposz = this->_internal_destinationposz();
  uint32_t raw_destinationposz;
  memcpy(&raw_destinationposz, &tmp_destinationposz, sizeof(tmp_destinationposz));
  if (raw_destinationposz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_destinationposz(), target);
  }

  // float rotateY = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_rotatey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PositionInfo)
  return target;
}

size_t PositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PositionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float currentPosX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposx = this->_internal_currentposx();
  uint32_t raw_currentposx;
  memcpy(&raw_currentposx, &tmp_currentposx, sizeof(tmp_currentposx));
  if (raw_currentposx != 0) {
    total_size += 1 + 4;
  }

  // float currentPosY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposy = this->_internal_currentposy();
  uint32_t raw_currentposy;
  memcpy(&raw_currentposy, &tmp_currentposy, sizeof(tmp_currentposy));
  if (raw_currentposy != 0) {
    total_size += 1 + 4;
  }

  // float currentPosZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposz = this->_internal_currentposz();
  uint32_t raw_currentposz;
  memcpy(&raw_currentposz, &tmp_currentposz, sizeof(tmp_currentposz));
  if (raw_currentposz != 0) {
    total_size += 1 + 4;
  }

  // float destinationPosX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposx = this->_internal_destinationposx();
  uint32_t raw_destinationposx;
  memcpy(&raw_destinationposx, &tmp_destinationposx, sizeof(tmp_destinationposx));
  if (raw_destinationposx != 0) {
    total_size += 1 + 4;
  }

  // float destinationPosY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposy = this->_internal_destinationposy();
  uint32_t raw_destinationposy;
  memcpy(&raw_destinationposy, &tmp_destinationposy, sizeof(tmp_destinationposy));
  if (raw_destinationposy != 0) {
    total_size += 1 + 4;
  }

  // float destinationPosZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposz = this->_internal_destinationposz();
  uint32_t raw_destinationposz;
  memcpy(&raw_destinationposz, &tmp_destinationposz, sizeof(tmp_destinationposz));
  if (raw_destinationposz != 0) {
    total_size += 1 + 4;
  }

  // float rotateY = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionInfo::GetClassData() const { return &_class_data_; }


void PositionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionInfo*>(&to_msg);
  auto& from = static_cast<const PositionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PositionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposx = from._internal_currentposx();
  uint32_t raw_currentposx;
  memcpy(&raw_currentposx, &tmp_currentposx, sizeof(tmp_currentposx));
  if (raw_currentposx != 0) {
    _this->_internal_set_currentposx(from._internal_currentposx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposy = from._internal_currentposy();
  uint32_t raw_currentposy;
  memcpy(&raw_currentposy, &tmp_currentposy, sizeof(tmp_currentposy));
  if (raw_currentposy != 0) {
    _this->_internal_set_currentposy(from._internal_currentposy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentposz = from._internal_currentposz();
  uint32_t raw_currentposz;
  memcpy(&raw_currentposz, &tmp_currentposz, sizeof(tmp_currentposz));
  if (raw_currentposz != 0) {
    _this->_internal_set_currentposz(from._internal_currentposz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposx = from._internal_destinationposx();
  uint32_t raw_destinationposx;
  memcpy(&raw_destinationposx, &tmp_destinationposx, sizeof(tmp_destinationposx));
  if (raw_destinationposx != 0) {
    _this->_internal_set_destinationposx(from._internal_destinationposx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposy = from._internal_destinationposy();
  uint32_t raw_destinationposy;
  memcpy(&raw_destinationposy, &tmp_destinationposy, sizeof(tmp_destinationposy));
  if (raw_destinationposy != 0) {
    _this->_internal_set_destinationposy(from._internal_destinationposy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destinationposz = from._internal_destinationposz();
  uint32_t raw_destinationposz;
  memcpy(&raw_destinationposz, &tmp_destinationposz, sizeof(tmp_destinationposz));
  if (raw_destinationposz != 0) {
    _this->_internal_set_destinationposz(from._internal_destinationposz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = from._internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    _this->_internal_set_rotatey(from._internal_rotatey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionInfo::CopyFrom(const PositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInfo::IsInitialized() const {
  return true;
}

void PositionInfo::InternalSwap(PositionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionInfo, _impl_.rotatey_)
      + sizeof(PositionInfo::_impl_.rotatey_)
      - PROTOBUF_FIELD_OFFSET(PositionInfo, _impl_.currentposx_)>(
          reinterpret_cast<char*>(&_impl_.currentposx_),
          reinterpret_cast<char*>(&other->_impl_.currentposx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class StatInfo::_Internal {
 public:
};

StatInfo::StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.StatInfo)
}
StatInfo::StatInfo(const StatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.life_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:Protocol.StatInfo)
}

inline void StatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , decltype(_impl_.life_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatInfo::~StatInfo() {
  // @@protoc_insertion_point(destructor:Protocol.StatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.StatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 life = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.StatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 life = 2;
  if (this->_internal_life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_life(), target);
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.StatInfo)
  return target;
}

size_t StatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.StatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 life = 2;
  if (this->_internal_life() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_life());
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatInfo::GetClassData() const { return &_class_data_; }


void StatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatInfo*>(&to_msg);
  auto& from = static_cast<const StatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.StatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_life() != 0) {
    _this->_internal_set_life(from._internal_life());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatInfo::CopyFrom(const StatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.StatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatInfo::IsInitialized() const {
  return true;
}

void StatInfo::InternalSwap(StatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatInfo, _impl_.speed_)
      + sizeof(StatInfo::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(StatInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class AnimInfo::_Internal {
 public:
};

AnimInfo::AnimInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.AnimInfo)
}
AnimInfo::AnimInfo(const AnimInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnimInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:Protocol.AnimInfo)
}

inline void AnimInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnimInfo::~AnimInfo() {
  // @@protoc_insertion_point(destructor:Protocol.AnimInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnimInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnimInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnimInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.AnimInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.AnimInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.AnimInfo)
  return target;
}

size_t AnimInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.AnimInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnimInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimInfo::GetClassData() const { return &_class_data_; }


void AnimInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnimInfo*>(&to_msg);
  auto& from = static_cast<const AnimInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.AnimInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimInfo::CopyFrom(const AnimInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.AnimInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimInfo::IsInitialized() const {
  return true;
}

void AnimInfo::InternalSwap(AnimInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_Enter*
Arena::CreateMaybeMessage< ::Protocol::S_Enter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Enter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Leave*
Arena::CreateMaybeMessage< ::Protocol::S_Leave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Leave >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Move*
Arena::CreateMaybeMessage< ::Protocol::C_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Move*
Arena::CreateMaybeMessage< ::Protocol::S_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Spawn*
Arena::CreateMaybeMessage< ::Protocol::S_Spawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Spawn >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Despawn*
Arena::CreateMaybeMessage< ::Protocol::S_Despawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Despawn >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Die*
Arena::CreateMaybeMessage< ::Protocol::C_Die >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Die >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Trapexecute*
Arena::CreateMaybeMessage< ::Protocol::S_Trapexecute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Trapexecute >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PositionInfo*
Arena::CreateMaybeMessage< ::Protocol::PositionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::StatInfo*
Arena::CreateMaybeMessage< ::Protocol::StatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::StatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::AnimInfo*
Arena::CreateMaybeMessage< ::Protocol::AnimInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::AnimInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
